{"componentChunkName":"component---src-templates-demo-js","path":"/demo/custom-controls","result":{"data":{"markdownRemark":{"html":"<p>This demo shows how to start using the <strong>custom controls</strong> api. This first example show how to write a custom render method for your control and how to define a custom action to run on the control mouseup. The new api offers the ability to run custom actions on:</p>\n<ul>\n<li>mousedown</li>\n<li>mouseup</li>\n</ul>\n<p>And to run custom code for</p>\n<ul>\n<li>Positioning</li>\n<li>Rendering</li>\n<li>Cursor styling</li>\n</ul>\n<h2 id=\"creating-the-control\" style=\"position:relative;\">Creating the control<a href=\"#creating-the-control\" aria-label=\"creating the control permalink\" class=\"anchor after\"></a></h2>\n<p>We create a new control and we add it to the object. To create a control we use <code>new fabric.Control(options)</code> In this case we want the corner to be near the top right classic control, so we give it a position of x of 0.5 that is the extreme right of the bounding box of the object. Same for y at -0.5. We do not want it to overlap with the current top right corner, so we add an <code>offsetY</code> with a positive number that will make it render a bit more down</p>\n<p>We want our control to render an icon rather than a fabric supported circle or square. So we have to provide our own render function to the control. The function is receiving the canvas context as first argument and so a simple drawImage will make it</p>\n<p>For the custom action we want simply to delete the object. We build a function following the mouseUpHandler signature and we use there <code>canvas.remove(target)</code></p>\n<h2 id=\"adding-a-clone-control\" style=\"position:relative;\">Adding a clone control<a href=\"#adding-a-clone-control\" aria-label=\"adding a clone control permalink\" class=\"anchor after\"></a></h2>\n<p>Let’s add a new control to allow for quick duplication of the Object. We use again <code>new fabric.Control(options)</code> and we add it to a key named <code>clone</code>. When the objects are shrunk too much, corners with offset do not look great, so in this case let’s try to keep them outside the bounding box, on the top</p>\n<p>For the clone functionality we will simply do</p>\n<pre><code class=\"language-javascript\">target.clone( function(cloned){\n    canvas.add(cloned)\n});\n</code></pre>","frontmatter":{"title":"Custom controls"}}},"pageContext":{"slug":"/demo/custom-controls","prev":{"title":"Copy and paste","slug":"/demo/copy-and-paste"},"next":null}}}